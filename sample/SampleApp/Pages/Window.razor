@page "/window"
@inject IJSRuntime jsRuntime;
@using BrowserInterop
<iframe id="child-iframe" src="/navigator"></iframe><br/>
<button id="btn-window" @onclick="async() => window = await jsRuntime.Window()">Get window</button>

<button id="btn-window-child-frame-console" @onclick="ChildFrameConsole">Child frame console</button>
<button id="btn-window-name-set" @onclick="SetName">Set name</button>
<button id="btn-window-opener" @onclick="GetOpener">Get Opener</button>
<button id="btn-window-visualviewport" @onclick="async() => viewport = await window.VisualViewport()">Get viewport</button>
<button id="btn-window-parent" @onclick="GetParent">Get Parent</button>
<button id="btn-window-alert" @onclick="@(async() => await window.Alert("test"))">Alert</button>
<button id="btn-window-blur" @onclick="@(async() => await window.Blur())">Blur</button>
<button id="btn-window-confirm" @onclick="@(async() => await window.Confirm("test"))">Confirm</button>
<button id="btn-window-close" @onclick="@(async() => await window.Close())">Close</button>
<button id="btn-window-moveBy" @onclick="@(async() => await window.MoveBy(1,2))">MoveBy</button>
<button id="btn-window-moveTo" @onclick="@(async() => await window.MoveTo(3,4))">MoveTo</button>
<button id="btn-window-focus" @onclick="@(async() => await window.Focus())">Focus</button>

<button id="btn-window-open" @onclick="@(async() => opened = await window.Open("/window", "_blank", new WindowFeature(){MenuBar= false}))">Open</button>

<button id="btn-window-close-opened" @onclick="@(async() => await opened.Close())">Close Opened</button><br/>
Window :
<ul>
    <li>InnerHeight: <span id="window-innerHeight">@window?.InnerHeight</span></li>
    <li>InnerWidth: <span id="window-innerWidth">@window?.InnerWidth</span></li>  
    <li>OuterHeight: <span id="window-outerHeight">@window?.OuterHeight</span></li>
    <li>OuterWidth: <span id="window-outerWidth">@window?.OuterWidth</span></li>  
    <li>Name: <span id="window-name">@window?.Name</span></li>
    <li>Opener Name: <span id="window-opener-name">@opener?.Name</span></li>
    <li>Parent Name: <span id="window-parent-name">@parent?.Name</span></li>
    <li>Personal Bar: <span id="window-personalbar">@personalBarVisible?.ToString().ToLower()</span></li>
    <li>ScreenX: <span id="window-ScreenX">@window?.ScreenX</span></li>
    <li>ScreenY: <span id="window-ScreenY">@window?.ScreenY</span></li>
    <li>ScrollX: <span id="window-ScrollX">@window?.ScrollX</span></li>
    <li>ScrollY: <span id="window-ScrollY">@window?.ScrollY</span></li>
    <li>Origin: <span id="window-Origin">@window?.Origin</span></li>
    <li>IsSecureContext : <span id="window-IsSecureContext">@window?.IsSecureContext.ToString().ToLower()</span></li>

</ul>
Visual Viewport :
<ul>
    <li>OffesetLeft: <span id="window-viewport-OffsetLeft">@viewport?.OffsetLeft</span></li>
    <li>OffsetTop: <span id="window-viewport-OffsetTop">@viewport?.OffsetTop</span></li>
    <li>PageLeft: <span id="window-viewport-PageLeft">@viewport?.PageLeft</span></li>
    <li>PageTop: <span id="window-viewport-PageTop">@viewport?.PageTop</span></li>
    <li>Width: <span id="window-viewport-Width">@viewport?.Width</span></li>
    <li>Height: <span id="window-viewport-Height">@viewport?.Height</span></li>
    <li>Scale: <span id="window-viewport-Scale">@viewport?.Scale</span></li>
    <li>resizeHandled: <span id="window-viewport-resizeHandled">@resizeHandled</span></li>
    <li>scrollHandled: <span id="window-viewport-scrollHandled">@scrollHandled</span></li>
</ul>
WIndow opened :
<ul>
      <li>InnerHeight: <span id="opened-innerHeight">@opened?.InnerHeight</span></li>
    <li>InnerWidth: <span id="opened-innerWidth">@opened?.InnerWidth</span></li>  
    <li>OuterHeight: <span id="opened-outerHeight">@opened?.OuterHeight</span></li>
    <li>OuterWidth: <span id="opened-outerWidth">@opened?.OuterWidth</span></li>  
    <li>Name: <span id="opened-name">@opened?.Name</span></li>
    <li>ScreenX: <span id="opened-ScreenX">@opened?.ScreenX</span></li>
    <li>ScreenY: <span id="opened-ScreenY">@opened?.ScreenY</span></li>
    <li>ScrollX: <span id="opened-ScrollX">@opened?.ScrollX</span></li>
    <li>ScrollY: <span id="opened-ScrollY">@opened?.ScrollY</span></li>
    <li>Origin: <span id="opened-Origin">@opened?.Origin</span></li>
    <li>IsSecureContext : <span id="opened-IsSecureContext">@opened?.IsSecureContext.ToString().ToLower()</span></li>
</ul>
@code{
    private WindowInterop window;
    private WindowInterop opened;
    private WindowInterop child;
    private WindowInterop opener;
    private WindowInterop parent;
    private bool? personalBarVisible;
    private VisualViewportInterop viewport;
    private int resizeHandled;
    private int scrollHandled;
    protected override async Task OnInitializedAsync()
    {
        window = await jsRuntime.Window();
        personalBarVisible = await window.PersonalBar.GetVisible();
        viewport = await window.VisualViewport();
        if(viewport != null){
            await viewport?.OnResize(() => {
                resizeHandled++;
                StateHasChanged();
                return Task.CompletedTask;
            });
            
            await viewport?.OnScroll(() => {
                scrollHandled++;
                StateHasChanged();
                return Task.CompletedTask;
            });
        }
    }
    protected async Task GetOpener(){
        opener = await window.Opener();
    }
    protected async Task GetParent(){
        parent = await window.Parent();
    }
    protected async Task SetName(){
        await window.SetName("Bla bla bla");
    }
    protected async Task ChildFrameConsole()
    {
        child = await window.Frames.Get(0);
        await child.Console.Log("test child");
    }
}