@page "/navigator"
@inject IJSRuntime jsRuntime;
@using RemiBou.Blazor.BrowserInterop
@using RemiBou.Blazor.BrowserInterop.Geolocation;
@using System.Globalization
<h1>Navigator API Interop Demo</h1>
<h2>Navigator : </h2>
@if(navigator != null){
<ul>
    <li id="navigator-app-code-name">@navigator.AppCodeName</li>
    <li id="navigator-app-name">@navigator.AppName</li>
    <li id="navigator-app-version">@navigator.AppVersion</li>
    <li>
        Connection :
        <ul>
            <li id="navigator-connection-downlink">@navigator.Connection.Downlink.ToString(CultureInfo.InvariantCulture)</li>
            <li id="navigator-connection-downlinkmax">@navigator.Connection.DownlinkMax.ToString(CultureInfo.InvariantCulture)</li>
            <li id="navigator-connection-effectiveType">@navigator.Connection.EffectiveType</li>
            <li>@navigator.Connection.EffectiveTypeEnum</li>
            <li id="navigator-connection-rtt">@navigator.Connection.Rtt</li>
            <li id="navigator-connection-saveData">@navigator.Connection.SaveData.ToString().ToLower()</li>
            <li id="navigator-connection-type">@navigator.Connection.Type</li>
            <li id="navigator-connection-typeEnum">@navigator.Connection.TypeEnum</li>
            <li id="navigator-cookieEnabled">@navigator.CookieEnabled.ToString().ToLower()</li>
            <li id="navigator-hardwareConcurrency">@navigator.HardwareConcurrency</li>
            <li id="navigator-javaEnabled">@javaEnabled?.ToString()?.ToLower()</li>
            <li id="navigator-language">@navigator.Language</li>
            <li id="navigator-languages">Languages :
                <ul>
                @foreach(var lang in navigator.Languages){
                    <li lang="@lang">@lang</li>    
                }
                </ul>
            </li>
             <li id="navigator-maxTouchPoints">@navigator.MaxTouchPoints</li>
            <li id="navigator-mimeTypes">MimeTypes :
                <ul>
                @foreach(var mime in navigator.MimeTypes){
                    <li mime="@mime.Type">@mime.Type</li>    
                }
                </ul>
            </li>
             <li id="navigator-plugins">Plugins :
                <ul>
                @foreach(var plugin in navigator.Plugins){
                    <li filename="@plugin.FileName">@plugin.FileName</li>    
                }
                </ul>
            </li>
            <li id="navigator-online">@navigator.Online.ToString().ToLower()</li>
            <li id="navigator-platform">@navigator.Platform</li>
            <li id="navigator-userAgent">@navigator.UserAgent</li>
            <li>
                Battery :
                <ul>
                    <li id="navigator-battery-charging">@battery.Charging.ToString().ToLower()</li>
                    <li id="navigator-battery-chargingTime">@battery.ChargingTime.ToString(CultureInfo.InvariantCulture)</li>
                    <li id="navigator-battery-dischargingTime">@battery.DischargingTime.ToString(CultureInfo.InvariantCulture)</li>
                    <li id="navigator-battery-level">@battery.Level.ToString(CultureInfo.InvariantCulture)</li>
                </ul>
            </li>
        </ul>
    </li>
</ul>
}
<span id="navigator-connection-event-change-handled">@connectionChangedEventHandled</span>
<button id="navigator-connection-event-change-stop" type="button" @onclick="async () => await connectionChangeEventHandler.DisposeAsync()">Dispose event handler</button>
<button id="navigator-geolocation-get" type="button" @onclick="async () => await GetGeolocation()">Get Geolocation</button>

@if(geolocationResult != null){
    

  <text>  GeolocationCoordinates :</text>
  <span id="navigator-geolocation-changed">@geopositionChanged</span>
  <button id="navigator-geolocation-event-change-stop" type="button" @onclick="async () => await geopositionWatcher.DisposeAsync()">Dispose geoposition event handler</button>

  @if(geolocationResult.Location != null){
    <ul>
        <li id="navigator-geolocation-timestamp">@geolocationResult.Location.TimestampDateTime</li>
        <li id="navigator-geolocation-coords-latitude">@geolocationResult.Location.Coords.Latitude.ToString(CultureInfo.InvariantCulture)</li>
        <li id="navigator-geolocation-coords-longitude">@geolocationResult.Location.Coords.Longitude.ToString(CultureInfo.InvariantCulture)</li>
        <li id="navigator-geolocation-coords-accuracy">@geolocationResult.Location.Coords.Accuracy.ToString(CultureInfo.InvariantCulture)</li>
        <li id="navigator-geolocation-coords-altitude">@geolocationResult.Location.Coords.Altitude.Value.ToString(CultureInfo.InvariantCulture)</li>
        <li id="navigator-geolocation-coords-altitudeAccuracy">@geolocationResult.Location.Coords.AltitudeAccuracy.Value.ToString(CultureInfo.InvariantCulture)</li>
        <li id="navigator-geolocation-coords-heading">@geolocationResult.Location.Coords.Heading.Value.ToString(CultureInfo.InvariantCulture)</li>
        <li id="navigator-geolocation-coords-speed">@geolocationResult.Location.Coords.Speed.Value.ToString(CultureInfo.InvariantCulture)</li>
    </ul>
  }
  @if(geolocationResult.Error != null){
    <ul>
        <li>@geolocationResult.Error.CodeEnum</li>
        <li>@geolocationResult.Error.Message</li>
    </ul>
  }
}
@code {
    private NavigatorInterop navigator;
    private BatteryManager battery;
    private bool? javaEnabled;

    private IAsyncDisposable connectionChangeEventHandler;
    private IAsyncDisposable geopositionWatcher;
    private int connectionChangedEventHandled = 0;
    private  GeolocationResult geolocationResult;

    private WindowInterop window;

    private int geopositionChanged;

    protected override async Task OnInitializedAsync()
    {
        window = await jsRuntime.Window();
        navigator = await window.Navigator();
        battery = await navigator.GetBattery();
        javaEnabled = await navigator.JavaEnabled();
        connectionChangeEventHandler =  await navigator.Connection.OnChange(async () => {
            await window.Console.Log("Connection Change");
            connectionChangedEventHandled++;
            StateHasChanged();
            
        });
        
    }

    public async Task GetGeolocation(){
        geolocationResult =await  navigator.Geolocation.GetCurrentPosition(new PositionOptions(){
            EnableHighAccuracy = true,
            MaximumAgeTimeSpan = TimeSpan.FromHours(1),
            TimeoutTimeSpan = TimeSpan.FromMinutes(1)
        });
        geopositionWatcher = await navigator.Geolocation.WatchPosition(async (p) =>
            {
                geopositionChanged++;
                StateHasChanged();
                await window.Console.Log(p);
            }  
        );
    }
}
