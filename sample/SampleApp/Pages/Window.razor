@page "/window"
@inject IJSRuntime jsRuntime;
@using BrowserInterop
<iframe id="child-iframe" src="/navigator"></iframe><br/>
<button id="btn-window" @onclick="async() => window = await jsRuntime.Window()">Get window</button>

<button id="btn-window-child-frame-console" @onclick="ChildFrameConsole">Child frame console</button>
<button id="btn-window-name-set" @onclick="SetName">Set name</button>
<button id="btn-window-opener" @onclick="GetOpener">Get Opener</button>
<button id="btn-window-visualviewport" @onclick="async() => viewport = await window.VisualViewport()">Get viewport</button>
<button id="btn-window-parent" @onclick="GetParent">Get Parent</button>
<button id="btn-window-alert" @onclick="@(async() => await window.Alert("test"))">Alert</button>
<button id="btn-window-blur" @onclick="@(async() => await window.Blur())">Blur</button>
<button id="btn-window-confirm" @onclick="@(async() => await window.Confirm("test"))">Confirm</button>
<button id="btn-window-close" @onclick="@(async() => await window.Close())">Close</button>
<button id="btn-window-moveBy" @onclick="@(async() => await window.MoveBy(1,2))">MoveBy</button>
<button id="btn-window-moveTo" @onclick="@(async() => await window.MoveTo(3,4))">MoveTo</button>
<button id="btn-window-focus" @onclick="@(async() => await window.Focus())">Focus</button>
<button id="btn-window-requestAnimationFrame" @onclick="RequestAnimationFrame">requestAnimationFrame</button>
<button id="btn-window-requestIdleCallback" @onclick="RequestIdleCallback">requestIdleCallback</button>
<button id="btn-window-postMessage" @onclick="@(async() => await window.PostMessage("message","http://localhost:5000"))">PostMessage</button>
<button id="btn-window-print" @onclick="@(async() => await window.Print())">Print</button>
<button id="btn-window-prompt" @onclick="@(async() => await window.Prompt("message","return"))">Prompt</button>
<button id="btn-window-cancelAnimationFrame" @onclick="@(async() => await window.CancelAnimationFrame(1))">cancelAnimationFrame</button>

<button id="btn-window-open" @onclick="@(async() => opened = await window.Open("/window", "_blank", new WindowFeature(){ MenuBar = false }))">Open</button>
<button id="btn-window-refresh-opened" @onclick="@(async() => opened = await jsRuntime.GetInstanceContent(opened, null))">Refresh Opened</button>
<button id="btn-window-resizeBy" @onclick="@(async() => await window.ResizeBy(100,200))">ResizeBy</button>
<button id="btn-window-resizeTo" @onclick="@(async() => await window.ResizeTo(150,250))">ResizeTo</button>
<button id="btn-window-scroll" @onclick="@(async() => await window.Scroll(150,250))">Scroll</button>
<button id="btn-window-scrollBy" @onclick="@(async() => await window.ScrollBy(new ScrollToOptions(150,250, ScrollToOptions.ScrollToOptionsBehaviorEnum.Smooth) ))">ScrollBy</button>
<button id="btn-window-stop" @onclick="@(async() => await window.Stop())">Stop</button>


<button id="btn-window-close-opened" @onclick="@(async() => {await opened.Close(); await opened.DisposeAsync();})">Close Opened</button><br/>
Window :
<ul>
    <li>animationFrame : <span id="window-requestAnimationFrame">@animationFrame</span></li>
    <li>requestIdleCallback : <span id="window-requestIdleCallback">@requestIdleCallback</span></li>
    <li>requestIdleCallbackTimeout : <span id="window-requestIdleCallbackTimeout">@requestIdleCallbackTimeout</span></li>
    <li>InnerHeight: <span id="window-innerHeight">@window?.InnerHeight</span></li>
    <li>InnerWidth: <span id="window-innerWidth">@window?.InnerWidth</span></li>  
    <li>OuterHeight: <span id="window-outerHeight">@window?.OuterHeight</span></li>
    <li>OuterWidth: <span id="window-outerWidth">@window?.OuterWidth</span></li>  
    <li>Name: <span id="window-name">@window?.Name</span></li>
    <li>Opener Name: <span id="window-opener-name">@opener?.Name</span></li>
    <li>Parent Name: <span id="window-parent-name">@parent?.Name</span></li>
    <li>Personal Bar: <span id="window-personalbar">@personalBarVisible?.ToString().ToLower()</span></li>
    <li>ScreenX: <span id="window-ScreenX">@window?.ScreenX</span></li>
    <li>ScreenY: <span id="window-ScreenY">@window?.ScreenY</span></li>
    <li>ScrollX: <span id="window-ScrollX">@window?.ScrollX</span></li>
    <li>ScrollY: <span id="window-ScrollY">@window?.ScrollY</span></li>
    <li>Origin: <span id="window-Origin">@window?.Origin</span></li>
    <li>IsSecureContext : <span id="window-IsSecureContext">@window?.IsSecureContext.ToString().ToLower()</span></li>

</ul>
Visual Viewport :
<ul>
    <li>OffesetLeft: <span id="window-viewport-OffsetLeft">@viewport?.OffsetLeft</span></li>
    <li>OffsetTop: <span id="window-viewport-OffsetTop">@viewport?.OffsetTop</span></li>
    <li>PageLeft: <span id="window-viewport-PageLeft">@viewport?.PageLeft</span></li>
    <li>PageTop: <span id="window-viewport-PageTop">@viewport?.PageTop</span></li>
    <li>Width: <span id="window-viewport-Width">@viewport?.Width</span></li>
    <li>Height: <span id="window-viewport-Height">@viewport?.Height</span></li>
    <li>Scale: <span id="window-viewport-Scale">@viewport?.Scale</span></li>
    <li>resizeHandled: <span id="window-viewport-resizeHandled">@resizeHandled</span></li>
    <li>scrollHandled: <span id="window-viewport-scrollHandled">@scrollHandled</span></li>
</ul>
WIndow opened :
<ul>
      <li>InnerHeight: <span id="opened-innerHeight">@opened?.InnerHeight</span></li>
    <li>InnerWidth: <span id="opened-innerWidth">@opened?.InnerWidth</span></li>  
    <li>OuterHeight: <span id="opened-outerHeight">@opened?.OuterHeight</span></li>
    <li>OuterWidth: <span id="opened-outerWidth">@opened?.OuterWidth</span></li>  
    <li>Name: <span id="opened-name">@opened?.Name</span></li>
    <li>ScreenX: <span id="opened-ScreenX">@opened?.ScreenX</span></li>
    <li>ScreenY: <span id="opened-ScreenY">@opened?.ScreenY</span></li>
    <li>ScrollX: <span id="opened-ScrollX">@opened?.ScrollX</span></li>
    <li>ScrollY: <span id="opened-ScrollY">@opened?.ScrollY</span></li>
    <li>Origin: <span id="opened-Origin">@opened?.Origin</span></li>
    <li>Closed: <span id="opened-Closed">@opened?.Closed.ToString().ToLower()</span></li>
    <li>IsSecureContext : <span id="opened-IsSecureContext">@opened?.IsSecureContext.ToString().ToLower()</span></li>
</ul>
PostMessage Payload :
<ul>
    <li>Data : <span id="window-message-data">@onMessageEventPayload?.Data</span></li>
    <li>Origin : <span id="window-message-origin">@onMessageEventPayload?.Origin</span></li>
    <li>Source is not null : <span id="window-message-source">@((onMessageEventPayload?.Source != null).ToString().ToLower())</span></li>
</ul>

Event triggered : <br/>
<ul>
    @foreach (var evt in eventTriggered)
    {
        <li id="@("window-event-"+evt)">@evt</li>
    }
</ul>

Before Install :
<ul>
@if(beforeInstallPlatforms != null){
    <li id="window-event-onbeforeinstallprompt-platforms">@string.Join(",", beforeInstallPlatforms)</li>
    
    <li id="window-event-onbeforeinstallprompt-userChoice">@beforeInstallAccepted.ToString().ToLower()</li>
}
</ul>
Device Motion Event : 
<ul>
    @if(deviceMotionEvent != null){
           <li id="window-event-ondevicemotion-acceleration-x">@deviceMotionEvent.Acceleration.X</li>
           <li id="window-event-ondevicemotion-acceleration-y">@deviceMotionEvent.Acceleration.Y</li>
           <li id="window-event-ondevicemotion-acceleration-z">@deviceMotionEvent.Acceleration.Z</li>
           <li id="window-event-ondevicemotion-accelerationIncludingGravity-x">@deviceMotionEvent.AccelerationIncludingGravity.X</li>
           <li id="window-event-ondevicemotion-accelerationIncludingGravity-y">@deviceMotionEvent.AccelerationIncludingGravity.Y</li>
           <li id="window-event-ondevicemotion-accelerationIncludingGravity-z">@deviceMotionEvent.AccelerationIncludingGravity.Z</li>
           <li id="window-event-ondevicemotion-rotationRate-alpha">@deviceMotionEvent.RotationRate.Alpha</li>
           <li id="window-event-ondevicemotion-rotationRate-beta">@deviceMotionEvent.RotationRate.Beta</li>
           <li id="window-event-ondevicemotion-rotationRate-gamma">@deviceMotionEvent.RotationRate.Gamma</li>
           <li id="window-event-ondevicemotion-interval">@deviceMotionEvent.Interval</li>


    }
</ul>
Device Orientation Event : 
<ul>
    @if(deviceOrientationEvent != null){
           <li id="window-event-ondeviceorientation-alpha">@deviceOrientationEvent.Alpha</li>
           <li id="window-event-ondeviceorientation-beta">@deviceOrientationEvent.Beta</li>
           <li id="window-event-ondeviceorientation-gamma">@deviceOrientationEvent.Gamma</li>
           <li id="window-event-ondeviceorientation-absolute">@deviceOrientationEvent.Absolute.ToString().ToLower()</li>


    }
</ul>  
Page Hide Event :
<ul>
    @if(pageHideTransitionEvent != null){
        <li id="window-event-pagehide-persisted">@pageHideTransitionEvent.Persisted.ToString().ToLower()</li>
    }
</ul>
@code{
    private WindowInterop window;
    private WindowInterop opened;
    private WindowInterop child;
    private WindowInterop opener;
    private WindowInterop parent;
    private bool? personalBarVisible;
    private VisualViewportInterop viewport;
    private int resizeHandled;
    private int scrollHandled;
    private int animationFrame = 0;
    private int requestIdleCallback = 0;
    private TimeSpan? requestIdleCallbackTimeout;
    private List<string> eventTriggered = new List<string>();

    private OnMessageEventPayload<string> onMessageEventPayload;
    private string[] beforeInstallPlatforms;
    private bool? beforeInstallAccepted;
    private DeviceMotionEvent deviceMotionEvent;
    private DeviceOrientationEvent deviceOrientationEvent;
    private PageTransitionEvent pageHideTransitionEvent;
    protected override async Task OnInitializedAsync()
    {
        window = await jsRuntime.Window();
        personalBarVisible = await window.PersonalBar.GetVisible();
        viewport = await window.VisualViewport();
        if (viewport != null)
        {
            await viewport?.OnResize(() =>
            {
                resizeHandled++;
                StateHasChanged();
                return Task.CompletedTask;
            });

            await viewport?.OnScroll(() =>
            {
                scrollHandled++;
                StateHasChanged();
                return Task.CompletedTask;
            });
        }
        await window.OnMessage<string>(async (payload) =>
        {
            onMessageEventPayload = payload;
            StateHasChanged();
            await Task.CompletedTask;
        });
        await window.OnAppInstalled(async () =>
        {
            await AddEventHandled("appinstalled");
        });
        await window.OnError(async () =>
        {
            await AddEventHandled("error");
        });
        await window.OnLanguageCHange(async () =>
        {
            await AddEventHandled("languagechange");
        });
        await window.OnOrientationChange(async () =>
        {
            await AddEventHandled("orientationchange");
        });
        await window.OnHashChange(async () =>
        {
            await AddEventHandled("hashchange");
        });
        await window.OnBeforeInstallPrompt(async beforeInstall =>
        {
            this.beforeInstallPlatforms = beforeInstall.Platforms;
            this.StateHasChanged();
            await beforeInstall.Prompt();
            this.StateHasChanged();
            this.beforeInstallAccepted = await beforeInstall.IsAccepted();
            this.StateHasChanged();
        });
        await window.OnDeviceMotion(async deviceMotionEvent =>
        {
            this.deviceMotionEvent = deviceMotionEvent;
            this.StateHasChanged();
            await Task.CompletedTask;
        });
        await window.OnDeviceOrientation(async deviceOrientationEvent =>
        {
            this.deviceOrientationEvent = deviceOrientationEvent;
            this.StateHasChanged();
            await Task.CompletedTask;
        });
        await window.OnAfterPrint(async () =>
        {
            await AddEventHandled("afterprint");
        });
        await window.OnBeforePrint(async () => await AddEventHandled("beforeprint"));
        await window.OnBeforeUnload(async b => await AddEventHandled("beforeunload"));
        await window.OnBlur(async () => await AddEventHandled("blur"));
        await window.OnClose(async () => await AddEventHandled("close"));
        await window.OnFocus(async () => await AddEventHandled("focus"));
        await window.OnLoad(async () => await AddEventHandled("load"));
        await window.OnContextMenu(async (e) =>
        {
            await AddEventHandled("contextmenu");
            await e.PreventDefault();
        });
        await window.OnOffline(async () => await AddEventHandled("offline"));
        await window.OnOnline(async () => await AddEventHandled("online"));
        await window.OnPageHide(async (p) =>
        {
            this.pageHideTransitionEvent = p;
            this.StateHasChanged();
            await Task.CompletedTask;
        });
    }
    protected async Task AddEventHandled(string evtName)
    {
        eventTriggered.Add(evtName);
        StateHasChanged();
        await Task.CompletedTask;
    }
    protected async Task RequestAnimationFrame()
    {

        await window.RequestAnimationFrame(async d =>
        {
            animationFrame++;
            StateHasChanged();
            await Task.CompletedTask;
        });
    }
    protected async Task RequestIdleCallback()
    {
        await window.RequestIdleCallback(async d =>
        {
            requestIdleCallback++;
            requestIdleCallbackTimeout = await d.TimeRemaining();
            StateHasChanged();
            await Task.CompletedTask;
        });
    }
    protected async Task GetOpener()
    {
        opener = await window.Opener();
    }
    protected async Task GetParent()
    {
        parent = await window.Parent();
    }
    protected async Task SetName()
    {
        await window.SetName("Bla bla bla");
    }
    protected async Task ChildFrameConsole()
    {
        child = await window.Frames.Get(0);
        await child.Console.Log("test child");
    }

}