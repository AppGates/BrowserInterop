@page "/console"
@inject IJSRuntime jsRuntime;
@using RemiBou.Blazor.BrowserInterop
<h1>Console API Interop Demo, look at the console to see what we are talking about</h1>
<div @ref="block">
    <div>
        <span>
WA demo HTML block for window.Console.DirXml</span>
    </div>
</div>
<button type="button" id="btn-console-do-test" @onclick="DoTests">Launch console Tests</button>

@code {
    ElementReference block;
    protected async Task DoTests()
    {
        var window = await jsRuntime.Window();

        //await window.Console.Clear();

        await window.Console.Assert(false,new SampleClass(1,"should be displayed as object"), new SampleClass(2,"should be displayed as object"));
        await window.Console.Assert(false,"should be displayed as {0} {1}", "text","and text also");
        await window.Console.Assert(true,new SampleClass(1,"should not be displayed as object"), new SampleClass(2,"should not be displayed as object"));
        await window.Console.Assert(true,"should not be displayed as {0} {1}", "text","and text also");

        await window.Console.Count();
        await window.Console.Count();
        await window.Console.Count("test");
        await window.Console.Count("test");
        await window.Console.CountReset("test");
        await window.Console.Count("test");

        await window.Console.Debug("this is a {0}","debug message");
        await window.Console.Debug(new SampleClass(1,"debug object"), new SampleClass(2,"debug object2"));
        
        await window.Console.Dir(new []{new SampleClass(1,"dir object"), new SampleClass(2,"dir object2")});

        await window.Console.DirXml(block);

        await window.Console.Error("this is a {0}","Error message");
        await window.Console.Error(new SampleClass(1,"Error object"), new SampleClass(2,"Error object2"));
        
        await using(await window.Console.Group("test")){
            await using(await window.Console.Group("test children")){
                await window.Console.Log("this is a children");
            }
        }

        await window.Console.Log("this is a {0}","Log message");
        await window.Console.Log(new SampleClass(1,"Log object"), new SampleClass(2,"Log object2"));

        await using(await window.Console.Profile("test")){
            await Task.Delay(100);
        }

        await window.Console.Table(new List<SampleClass>{new SampleClass(1,"Log object"), new SampleClass(2,"Log object2")}, "id");

      
        await using(await window.Console.Time("sub task"))
        {
            await Task.Delay(100);
            await window.Console.TimeLog("sub task");
            await Task.Delay(100);
        }
        await window.Console.TimeStamp("a timestamp");
        await window.Console.Trace(new []{new SampleClass(1,"dir object"), new SampleClass(2,"dir object2")});
    }

    public class SampleClass{
        public int Id { get; set; }
        public string Name { get; set; }

        public SampleClass(int id, string name){
            Id = id;
            Name = name;

        }

        public override string ToString(){
            return Id+"-"+Name;
        }
    }
}
